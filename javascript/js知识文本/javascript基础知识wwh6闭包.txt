闭包:
  在函数外部能操作内部的局部变量  调试里出现Closure
  function f1() {const x = 20; function f() {   return x; } return f;}  
 本质是内部函数中的一个对象, 这个对象中包含引用的变量属性

 作用:* 延长局部变量的生命周期* 让函数外部能操作内部的局部变量

 缺点:可能导致内存泄露 
（1）
内存溢出一般是指执行程序时，程序会向系统申请一定大小的内存，当系统现在的实际内存少于需要的内存时，就会造成内存溢出

内存溢出造成的结果是先前保存的数据会被覆盖或者后来的数据会没地方存
（2）  
内存泄漏是指程序执行时，一些变量没有及时释放，一直占用着内存
而这种占用内存的行为就叫做内存泄漏。

作为一般的用户，根本感觉不到内存泄漏的存在。真正有危害的是内存泄漏的堆积，这会最终消耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积。

内存泄漏如果一直堆积，最终会导致内存溢出问题
  
         解决:及时释放fn= null; 不用闭包
    var person = function(){
      let name = "cjy";//私有属性 外部不能访问
     //需要通过getXXX 或setXXX访问内部属性
      return {
         getName : function(){
            return name;
         },
         setName : function(newName){
            name = newName;
        }}}();
       console.log(person.name);//直接访问，结果为undefined
       console.log(person.getName()); // cjy
       console.log.setName("abruzzi");
       console.log(person.getName()); // abruzzi
闭包的应用
  1.函数柯里化：将一个接受多个参数的函数分解成多个接收单个参数的函数的技术
   经典面试题：add(x)(y)(z) = x+y+z
   var add=function(x){
     return function(y){
      return function(z){
           return x+y+z;
           }
         }
      }
    console.log(add(1)(2)(3)) 
2.函数模块化
      var $=jQuery=function(...args){
         let name =" cjy";
         hobby = ['eat','sleep','codeing']
        function say(){
           console.log('my name is '+name+'.')
        }
       function showHobby(){
          console.log(name+' like '+hobby.join(',')+'!')
       }
       return {say,showHobby}
   };
    $('div>ul').say();
保证了内部数据变量是隐藏和私有状态而返回值则就是给别人用的函数。
就像 JQuery 中返回的 $
作业
  1.闭包是什么？他有什么作用 ？它的缺点是什么
  2.内存溢出是   内存泄漏是   闭包如何防止内存泄漏
  3.用闭包写anmial类 属性name 写get和set方法
  4.什么是函数的柯里化？ Max(a)(b)(c)求abc中的最大值
  5.自定义$ 
          属性let dom=[];size=dom.length;
          如果arguments.length>0 把dom.push(...arg);
          方法push,pop,each,find
